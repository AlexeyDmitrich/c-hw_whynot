// пусть Вася будет существующим типом данных 
int vasya; // кстати, ещё неясно, сколько он весит
// пиво должно быть другим типом данных, но тоже реальным
double beer = 21;  // а вот пива известно сколько
// ни Вася, ни пиво не содержат места для функционала, значит фигурные скобки не нужны
// но каждое утверждение должно быть закрыто точкой с запятой

void Drunk1Glass (int anonimus, double swill){
    // здесь будет расписан функционал функции, значит нужны фигурные скобки
    // и не нужны точка с запятой
    swill -= 0.2;       // а вот каждое утверждение внутри
    anonimus += 1;    // должно быть закрыто точкой с запятой
} // тело функции закрывается фигурной скобкой

// обозначаем Васин вес
vasya = 92; // здесь уже не указывается тип данных, т.к. он был инициализирован в строке 2

// зовем Васю выпить
Drunk1Glass (vasya, beer); // теперь мы не создаём функцию, а значит не открываем её капот в виде скобок
// в круглых скобках передаем аргументы, они обязательно должны соответствовать типу данных

Console.Write("Вася весит ");
Console.WriteLine(vasya);           // 92
Console.Write("Пива осталось ");
Console.WriteLine(beer);            // 5
// да, видимость переменных - отдельная тема... 

//Если Вася не толстеет, пусть хотя бы пьянеет.
// нужна степень трезвости...
int vasyasSobriety = 100; // сейчас Вася трезв как стёклышко. 
// Просто трезв, ничего не делает, скобки не нужны

int DrunkAll (int anonimus, double swill){  // на этот раз аноним будет пить до дна
    // да, это почти та же самая функция, но уже не void, а int
    int intoxication = 0;    // это степень опьянения
    // кстати, в данном случае значение присвоить нужно обязательно
    while (swill > 0) {   // пока выпивки больше нуля, будут действия. 
    // чтобы их описать лезем под капот, а значит открываем фигурные скобки
        swill -= 0.2;     // пока есть выпивка, она будет уменьшаться на 0.2
        anonimus += 1;    // аноним будет поправляться на 1 кг
        intoxication++;   // и пьянеть на 1%
    }    // капот цикла так же закрываем фигурной скобкой
    return intoxication;    // int функция всегда возвращает int значение
} // тело метода (функции здесь называются так) закрывается фигурной скобкой

// Снова попробуем споить Васю.
// Пусть пользователь программы решает, сколько ему можно выпить
Console.WriteLine("Сколько пива можно выпить Васе?");
beer = int.Parse(Console.ReadLine());    // Кстати, тоже методы (или методы классов, как в Java), 
// и им под капот тоже не стоит лезть, что говорит о синтаксисе ; а не {}
// если очень хочется, можно (в VScode) нажать Ctrl и кликнуть на Parse - откроется то, что под капотом
// в данном случае, мы присвоили переменной результат int функции

// Для этого из 100% трезвости будем вычитать % опьянения
vasyasSobriety -= DrunkAll(vasya, beer); // мы один раз зовем Васю выпить и не видим, как он это делает, (значит ; а не {} )
// можно было ввести сюда отдельную переменную для опьянения,
// но int метод и так вернёт значение int, которое мы используем всего раз 

// добавим простое внешнее условие
if (vasyasSobriety < 1) {
    // здесь может быть любое количество действий, поэтому {}
    Console.WriteLine("Вася в алкогольной коме уехал в реанимацию"); // а эта функция только принимает от нас аргумент
    // что она делает дальше - мы не знаем, поэтому ;
} 
else {  // здесь мы тоже пишем свою логику, соответственно, её блок берём в скобки
Console.Write("Вася трезв на ");   // эта строка продолжится, поэтому в ней нет Line
Console.Write(vasyasSobriety);
Console.WriteLine(" %");   // а здесь будет сделан абзац
}